//3D CONTROLLER
//2D controller from line 274
using UnityEngine;

public class Controller : MonoBehaviour
{
    [SerializeField]
    private LayerMask collisionLayer;
    [SerializeField]
    private float acceleration = 2;
    [SerializeField]
    private float deceleration = 1;
    [SerializeField]
    private float maxSpeed = 3;
    [SerializeField]
    private float minimumSpeedCutoff = 0.1f;
    [SerializeField]
    private float gravityModifier = 1;
    [SerializeField]
    private float skinWidth = 0.03f;
    [SerializeField]
    private float groundCheckDistance = 0.1f;
    [SerializeField]
    private float jumpHeight = 4;
    [SerializeField]
    private float staticFriction = 0.45f;
    [SerializeField]
    private float dynamicFriction = 0.25f;
    [SerializeField]
    private float airResistance = 0.25f;
    [SerializeField]
    private float mouseSensitivity = 1;
    [SerializeField]
    private float maximumCameraAngle = 90;
    [SerializeField]
    private float minimumCameraAngle = -90;
    [SerializeField]
    private Vector3 cameraOffset;
    [SerializeField]
    private bool haveThirdPersonCameraActive = true;

    [SerializeField]
    private Vector3 velocity;
    private Vector3 direction;

    private float height;
    private float radius;
    private Vector3 center;

    private new CapsuleCollider collider;
    private Transform playerCamera;

    private float cameraRadius;

    float rotationX;
    float rotationY;

    void Awake()
    {
        playerCamera = Camera.main.transform;
        collider = GetComponent<CapsuleCollider>();
        height = collider.height;
        center = collider.center;
        radius = collider.radius;

        cameraRadius = playerCamera.GetComponent<SphereCollider>().radius;
    }

    void Update()
    {
        MakeSpeed();

        ControlCamera();

        Vector3 gravity = Vector3.down * gravityModifier * Time.deltaTime;

        velocity += gravity;

        if (Input.GetKeyDown(KeyCode.Space))
        {
            Jump();
        }

        Collision();

        velocity *= Mathf.Pow(airResistance, Time.deltaTime);

        transform.position += velocity * Time.deltaTime;
    }

    private void Collision()
    {
        while (true)
        {
            Vector3 point1 = transform.position + center + (Vector3.up * ((height / 2) - radius));
            Vector3 point2 = transform.position + center + (Vector3.down * ((height / 2) - radius));

            Physics.CapsuleCast(point1, point2, radius, velocity.normalized, out RaycastHit hit, float.MaxValue, collisionLayer);

            if (hit.collider != null)
            {
                Vector3 normal = hit.normal;

                float distance = skinWidth / Vector3.Dot(velocity.normalized, normal);
                distance += hit.distance;

                if (distance > velocity.magnitude * Time.deltaTime)
                {
                    break;
                }

                if (distance > 0)
                {
                    transform.position += velocity.normalized * distance;
                }

                Vector3 velocityBeforeNormalforce = CalculateNormalForce(velocity, normal);
                velocity += velocityBeforeNormalforce;

                Friction(velocityBeforeNormalforce.magnitude);

                /*
                 * TODO: Fix inheriting moving platform velocity 
                 */
                MovingPlatform mov = hit.collider.GetComponent<MovingPlatform>();
                if (mov != null)
                {
                    Vector3 velocityProjected = Vector3.ProjectOnPlane(velocity, hit.normal);

                    Vector3 diff = mov.velocity - velocityProjected;
                    //Debug.Log(diff + " = " + mov.velocity + " - " + velocityProjected);

                    if (Mathf.Abs((mov.velocity - velocityProjected).magnitude) < staticFriction)
                    {
                        velocity = mov.velocity;
                        Debug.Log("AAAAAAA");
                    }
                    else
                    {
                        velocity = diff;
                        Debug.Log("BBBBBBB");
                    }
                }
            }
            else
            {
                break;
            }
        }
    }

    void ControlCamera()
    {
        rotationX -= Input.GetAxisRaw("Mouse Y") * mouseSensitivity;
        rotationY += Input.GetAxisRaw("Mouse X") * mouseSensitivity;
        rotationX = Mathf.Clamp(rotationX, minimumCameraAngle, maximumCameraAngle);
        Quaternion cameraRotation = Quaternion.Euler(rotationX, rotationY, 0);

        Quaternion playerRotation = Quaternion.Euler(0, rotationY, 0);

        transform.rotation = playerRotation;

        if (haveThirdPersonCameraActive)
        {
            Vector3 cameraRelationShipVector = cameraRotation * cameraOffset;

            playerCamera.position = transform.position + cameraRelationShipVector;

            playerCamera.LookAt(transform);

            float cameraRadius = playerCamera.GetComponent<SphereCollider>().radius;
            Physics.SphereCast(transform.position, cameraRadius, playerCamera.position, out RaycastHit cameraHit, Mathf.Infinity, collisionLayer);

            if (cameraHit.collider != null)
            {
                playerCamera.position = cameraHit.point;
                Debug.Log("hit");
            }
        }
        else
        {
            playerCamera.position = transform.position;
        }
    }

    void Friction(float normalMagnitude)
    {
        if (velocity.magnitude < (normalMagnitude * staticFriction))
        {
            velocity.x = 0;
        }
        else
        {
            velocity += -velocity.normalized * (normalMagnitude * dynamicFriction);
        }
    }

    void Jump()
    {
        Physics.SphereCast(transform.position, radius, Vector3.down, out RaycastHit groundCheck, groundCheckDistance + skinWidth, collisionLayer);

        if (groundCheck.collider != null)
        {
            velocity.y = jumpHeight;
        }
    }

    Vector3 CalculateNormalForce(Vector3 velocity, Vector3 normal)
    {
        if ((Vector3.Dot(velocity, normal) < 0))
        {
            Vector3 projection = Vector3.Dot(velocity, normal) * normal;
            return -projection;
        }
        return Vector3.zero;
    }


    void MakeSpeed()
    {
        direction = new Vector3(Input.GetAxisRaw("Horizontal"), 0, Input.GetAxisRaw("Vertical")).normalized;

        direction = playerCamera.transform.rotation * direction;

        Physics.SphereCast(transform.position, radius, Vector3.down, out RaycastHit groundCheck, groundCheckDistance + skinWidth, collisionLayer);

        if (!haveThirdPersonCameraActive)
        {
            playerCamera.position -= new Vector3(Input.GetAxisRaw("Horizontal"), 0, Input.GetAxisRaw("Vertical"));
        }

        direction = Vector3.ProjectOnPlane(direction, groundCheck.normal).normalized;

        if (direction.magnitude < 0.1)
        {
            Decelerate(direction);
        }
        else
        {
            Accelerate(direction);
        }
    }

    void Accelerate(Vector3 direction)
    {
        velocity += direction * acceleration * Time.deltaTime;

        if (velocity.magnitude > maxSpeed)
        {
            velocity = velocity.normalized * maxSpeed;
        }
    }

    void Decelerate(Vector2 direction)
    {
        Vector2 tempVelocity = velocity;

        tempVelocity -= tempVelocity * deceleration * Time.deltaTime;

        Physics.SphereCast(transform.position, radius, Vector3.down, out RaycastHit groundCheck, groundCheckDistance + skinWidth, collisionLayer);

        if (groundCheck.collider != null)
        {
            velocity.x = tempVelocity.x;
        }

        if (velocity.magnitude < minimumSpeedCutoff)
        {
            velocity.x = 0;
        }
    }
}

//2D CONTROLLER
using UnityEngine;

public class Controller : MonoBehaviour
{
    [SerializeField]
    private LayerMask layer;
    [SerializeField]
    private float acceleration = 2;
    [SerializeField]
    private float deceleration = 1;
    [SerializeField]
    private float maxSpeed = 3;
    [SerializeField]
    private float minimumSpeedCutoff = 0.1f;
    [SerializeField]
    private float gravityModifier = 1;
    [SerializeField]
    private float skinWidth = 0.03f;
    [SerializeField]
    private float groundCheckDistance = 0.1f;
    [SerializeField]
    private float jumpHeight = 4;
    [SerializeField]
    private float staticFriction = 0.45f;
    [SerializeField]
    private float dynamicFriction = 0.25f;
    [SerializeField]
    private float airResistance = 0.25f;

    private Vector2 velocity;

    new BoxCollider2D collider;

    RaycastHit2D hit;
    RaycastHit2D groundCheck;

    void Awake()
    {
        collider = GetComponent<BoxCollider2D>();
    }

    void Update()
    {
        MakeSpeed();

        Vector2 gravity = Vector2.down * gravityModifier * Time.deltaTime;

        velocity += gravity;

        if (Input.GetKeyDown(KeyCode.Space))
        {
            Jump();
        }

        Collision();

        velocity *= Mathf.Pow(airResistance, Time.deltaTime);

        transform.position += (Vector3)velocity * Time.deltaTime;
    }

    private void Collision()
    {

        while (true)
        {
            float distance = 0;
            hit = Physics2D.BoxCast(transform.position, collider.size, 0, velocity.normalized, float.MaxValue, layer);

            if (hit.collider != null)
            {
                Vector2 normal = hit.normal;

                distance += skinWidth / Vector2.Dot(velocity.normalized, normal);
                distance += hit.distance;

                if (hit.collider.GetComponent<MovingPlatform>())
                {
                    Vector2 movingPlatformVector = hit.collider.GetComponent<MovingPlatform>().velocity;
                    Debug.Log("movingPlatformVector is " + movingPlatformVector + ", velocity is " + velocity);
                    Debug.Log("movingPlatformvector.normalised is " + movingPlatformVector.normalized);
                    //Debug.Log("movingPlatformVector is " + movingPlatformVector + ", velocity is " + velocity + ", the difference is " + (velocity - movingPlatformVector));
                    //velocity -= velocity;
                    velocity = movingPlatformVector - velocity;
                }

                if (distance > velocity.magnitude * Time.deltaTime)
                {
                    break;
                }

                if (distance > 0)
                {
                    transform.position += (Vector3)velocity.normalized * distance;
                }

                Vector2 velocityBeforeNormalforce = CalculateNormalForce(velocity, normal);
                velocity += velocityBeforeNormalforce;

                Friction(velocityBeforeNormalforce.magnitude);


            }
            else
            {
                break;
            }
        }
    }

    void Friction(float normalMagnitude)
    {
        if (velocity.magnitude < (normalMagnitude * staticFriction))
        {
            velocity.x = 0;
        }
        else
        {
            velocity += -velocity.normalized * (normalMagnitude * dynamicFriction);
        }
    }

    void Jump()
    {
        groundCheck = Physics2D.BoxCast(transform.position, collider.size, 0.0f, Vector2.down, groundCheckDistance + skinWidth, layer);

        if (groundCheck)
        {
            velocity.y = jumpHeight;
        }
    }

    Vector2 CalculateNormalForce(Vector2 velocity, Vector2 normal)
    {
        if ((Vector2.Dot(velocity, normal) < 0))
        {
            Vector2 projection = Vector2.Dot(velocity, normal) * normal;
            return -projection;
        }
        return Vector2.zero;
    }


    void MakeSpeed()
    {
        Vector2 direction = new Vector2(Input.GetAxisRaw("Horizontal"), 0);

        if (direction.magnitude < 0.1)
        {
            Decelerate(direction);
        }
        else
        {
            Accelerate(direction);
        }
    }

    void Accelerate(Vector2 direction)
    {
        velocity += direction * acceleration * Time.deltaTime;

        if (velocity.magnitude > maxSpeed)
        {
            velocity = velocity.normalized * maxSpeed;
        }
    }

    void Decelerate(Vector2 direction)
    {
        Vector2 tempVelocity = velocity;

        tempVelocity -= tempVelocity * deceleration * Time.deltaTime;

        groundCheck = Physics2D.BoxCast(transform.position, collider.size, 0.0f, Vector2.down, groundCheckDistance + skinWidth, layer);

        if (groundCheck)
        {
            velocity.x = tempVelocity.x;
        }

        if (velocity.magnitude < minimumSpeedCutoff)
        {
            velocity.x = 0;
        }
    }
}